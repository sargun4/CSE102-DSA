Compress a file using Huffman codes and decompress a file
encoded using Huffman codes. The inputs of the program are the following:
1. The name of the input file
2. The name of the output file
3. Mode (0/1) : 0 for compression, 1 for decompression
Compression Mode:
In compression mode, the input file is the name of the file that needs to be compressed, and the
output file is the name of the file that will be created during the compression. The input file
contains a sequence of 8-bit characters. The output file stores the metadata for Huffman codes
followed by the encoded sequence. The program also prints the Huffman codes for each
character in the file in compression mode.
Decompression mode:
In decompression mode, the input file is the file's name that is created during the compression
mode. The output file will be created during the decompression. The decompression algorithm
first builds the tree containing Huffman codes using the metadata and then uses the tree to
decode the encoded sequence in the input file. The decoded data is written to the output file


Format of the metadata that is stored in the compressed file:
N: no. of unique characters present in the input file
E: a chosen EOF chatacter (In this case, the character with the ASCII Code 0)
ascii(x): the ASCII code of character x
huffmanCode(x): the Huffman Code generated for character x.
Then, the generated compressed file contains metadata for the encoding in the following format (for the ease of access):

Line #1:     <N+1>
Line #2:     <ascii(character-1)> <huffmanCode(character-1)>
Line #3:     <ascii(character-2)> <huffmanCode(character-2)>
...          ...
Line #(N+1): <ascii(character-N)> <huffmanCode(character-N)>
Line #(N+2): <ascii(character-E)> <huffmanCode(character-E)>
The compressed data follows this metadata format. A picture of the sample output file (generated from the sample input file) is attached below.
For reference, the input file contained the unique characters 'a', 'b', 'c', 'd', 'e', and 'f', i.e. N = 6. The first 8 lines of the output file store the metadata.

  
Line #1: The first line contains a single value, which is N+1. N represents the no. of unique characters present in the input file, and the additional 1 is for the EOF (End-of-File) character.
Lines #2 to #(N+1): Each line corresponds to a unique character (except the EOF character) and its corresponding Huffman code. The format of each line is "<ascii(character)> <huffmanCode(character)>". The ASCII code of the character is followed by a space and then the Huffman code assigned to that character.
Line #(N+2): The last line of the metadata corresponds to the EOF character. It follows the same format as the previous lines ("<ascii(character-E)> <huffmanCode(character-E)>"), where character-E represents the EOF character.
In summary, the metadata provides a mapping between the ASCII codes of the characters and their corresponding Huffman codes, allowing for proper decoding of the compressed data.
